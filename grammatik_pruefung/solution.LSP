;-------------------------------------------------- AUFGABE 1 --------------------------------------------------

;NL-SYNTAXANALYSE
(SETF LEX-ARTIKEL '(DER DEN DIE EIN EINE EINEN))
(SETF LEX-NOMEN '(STUDENT STUDENTEN INFORMATIK HASE HASEN MOHRRUEBE MOHRRUEBEN))
(SETF LEX-EIGENNAME '(MAX MORITZ))
(SETF LEX-VERB '(MAG MOEGEN STUDIERT STUDIEREN ISST ESSEN SCHLAEFT SCHLAFEN SIEHT SEHEN))


;Wandelt Liste in String um:
(DEFUN LIST-TO-STRING (LIST)
(COND ((NULL (CDR LIST)) (PRINC-TO-STRING (CAR LIST)))
      (T (concatenate 'string (PRINC-TO-STRING (CAR LIST)) " " (LIST-TO-STRING (CDR LIST))))))
;(LIST-TO-STRING '(A B C));-> "A B C"


;PARSER
(DEFUN PARSER (L) 
(COND ((NULL (SATZ L)) "ACCEPT")
      ((STRINGP (SATZ L)) (SATZ L))
      (T (concatenate 'string "DAS WORT " (APPLY 'concatenate 'string (MAPCAR 'SYMBOL-NAME (SATZ L)))  " IST UEBERFLUESSIG"))))

;SATZ
(DEFUN SATZ (L) 
(COND ((NULL L) "SATZ FEHLT")
      ((MEMBER (CAR L) (APPEND LEX-ARTIKEL LEX-nomen LEX-EIGENNAME)) (VERBALPHRASE (NOMINALPHRASE L)))
      (T (concatenate 'string "SATZ BEGINNT NICHT MIT EINER NOMINALPHRASE: " (SYMBOL-NAME (CAR L))))))

;NOMINALPHRASE
(DEFUN NOMINALPHRASE (L)
(COND ((NULL L) "NOMINALPHRASE FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-ARTIKEL) (nomen (ARTIKEL L)))
      ((MEMBER (CAR L) LEX-NOMEN) (nomen L))
      ((MEMBER (CAR L) LEX-EIGENNAME) (EIGENNAME L))
      (T (concatenate 'string "NOMINALPHRASE BEGINNT NICHT MIT ARTIKEL, nomen ODER EIGENNAME: " (SYMBOL-NAME (CAR L))))))

;VERBALPHRASE
(DEFUN VERBALPHRASE (L)
(COND ((NULL L) "VERBALPHRASE FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-VERB) (RESTPHRASE (VERB L)))
      (T (concatenate 'string "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: " (SYMBOL-NAME (CAR L))))))

;RESTPHRASE
(DEFUN RESTPHRASE (L)
(COND ((NULL L) NIL)
      (T (NOMINALPHRASE L))))

;ARTIKEL
(DEFUN ARTIKEL (L)
(COND ((NULL L) "ARTIKEL FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-ARTIKEL) (CDR L))
      (T (concatenate 'string "DAS WORT " (SYMBOL-NAME (CAR L)) " ist kein ARTIKEL"))))
;(ARTIKEL '(DER));->NIL
;(ARTIKEL '(EINE));->NIL
;(ARTIKEL '(PAUL));->FEHLER ARTIKEL

;nomen
(DEFUN nomen (L)
(COND ((NULL L) "nomen FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-NOMEN) (CDR L))
      (T (concatenate 'string "DAS WORT " (SYMBOL-NAME (CAR L)) " ist kein nomen"))))
;(nomen '(MOHRRUEBE));->NIL
;(nomen '(MOHRRUEBEN));->NIL
;(nomen '(SCHRAUBE));->FEHLER nomen


;EIGENNAME
(DEFUN EIGENNAME (L)
(COND ((NULL L) "EIGENNAME FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-EIGENNAME) (CDR L))
      (T (concatenate 'string "DAS WORT " (SYMBOL-NAME (CAR L)) " ist kein EIGENNAME"))))
;(EIGENNAME '(MAX));->NIL
;(EIGENNAME '(HUND));->FEHLER EIGENNAME

;VERB
(DEFUN VERB (L)
(COND ((NULL L) "VERB FEHLT")
      ((ATOM L) L)
      ((MEMBER (CAR L) LEX-VERB) (CDR L))
      (T (concatenate 'string "DAS WORT " (SYMBOL-NAME (CAR L)) " ist kein VERB"))))
;(VERB '(MAG));-> NIL
;(VERB '(ER));-> DAS WORT ER ist kein VERB

;----------------------------------------------------------------------------------------------------------------
(PRINT '---------------------------------------------KORREKT-----------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER '(EIN STUDENT STUDIERT INFORMATIK))	;-> ACCEPT
(PARSER '(DER STUDENT STUDIERT INFORMATIK))	;-> ACCEPT
(PARSER '(MAX STUDIERT INFORMATIK))		;-> ACCEPT
(PARSER '(EIN STUDENT STUDIERT DIE INFORMATIK))	;-> ACCEPT
(PARSER '(DER STUDENT STUDIERT DIE INFORMATIK))	;-> ACCEPT
(PARSER '(MAX STUDIERT DIE INFORMATIK))		;-> ACCEPT
(PARSER '(MORITZ MAG INFORMATIK))		;-> ACCEPT
(PARSER '(MAX MAG MORITZ))			;-> ACCEPT
(PARSER '(DER HASE STUDIERT DIE MOHRRUEBE))	;-> ACCEPT
(PARSER '(MAX STUDIERT DEN HASEN))		;-> ACCEPT
(PARSER '(MORITZ SCHLAEFT))                     ;-> ACCEPT
;----------------------------------------------------------------------------------------------------------------
(PRINT '-----------------------------------------KONGRUENZFEHLER------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER '(DIE HASE STUDIERT DIE STUDENT))	;-> ACCEPT
(PARSER '(DIE HASE SCHLAEFT DIE STUDENT))	;-> ACCEPT
(PARSER '(STUDENT STUDIERT DEN MOHRRUEBE))      ;-> ACCEPT
(PARSER '(DEN STUDENT STUDIERT DEN MOHRRUEBE))  ;-> ACCEPT
(PARSER '(DER MOHRRUEBE SIEHT DEN STUDENT))     ;-> ACCEPT
(PARSER '(DIE MOHRRUEBE SIEHT DER STUDENT))     ;-> ACCEPT
(PARSER '(DEN MOHRRUEBE SIEHT DIE STUDENT))     ;-> ACCEPT
;----------------------------------------------------------------------------------------------------------------
(PRINT '------------------------------------------SYNTAXFEHLER--------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER '())				;-> SATZ FEHLT
(PARSER '(EIN))				;-> nomen-FEHLT
(PARSER '(STUDENT))			;-> VERBALPHRASE-FEHLT
(PARSER '(STUDENT HASE))		;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: HASE" 
(PARSER '(EIN STUDENT STUDIERT DER))	;-> nomen-FEHLT
(PARSER '(DER STUDENT MAG STUDIERT))	;-> "NOMINALPHRASE BEGINNT NICHT MIT ARTIKEL nomen ODER EIGENNAME: STUDIERT"
(PARSER '(STUDIERT MAX INFORMATIK))	;-> "SATZ BEGINNT NICHT MIT EINER NOMINALPHRASE: STUDIERT"
(PARSER '(MORITZ INFORMATIK MAG))	;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: INFORMATIK"
(PARSER '(MAX MAG MORITZ STUDIERT))	;-> "Das Wort STUDIERT ist ueberfluessig"
(PARSER '(MAX STUDIERT DIE ASTRONOMIE)) ;-> "DAS WORT ASTRONOMIE IST KEIN nomen"
(PARSER '(MAX INFORMATIK SCHLAEFT))     ;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: INFORMATIK" 

;--------------------------------------------------------------------------------------------------------------
;-------------------------------------------------- AUFGABE 2 --------------------------------------------------

(DEFSTRUCT PARSTYP PHRASE CGN ERROR)

(SETF 
;----------------------------------------------------------------------------------------------------------------
MAX    (MAKE-PARSTYP :CGN '((NOM MAS SING) (AKK MAS SING)))
MORITZ (MAKE-PARSTYP :CGN '((NOM MAS SING) (AKK MAS SING)))
;----------------------------------------------------------------------------------------------------------------
DER (MAKE-PARSTYP :CGN '((NOM MAS SING)))
DEN (MAKE-PARSTYP :CGN '((AKK MAS SING))); AUCH DATIV PLURAL
DIE (MAKE-PARSTYP :CGN '((NOM FEM SING) (AKK FEM SING) (NOM FEM PLUR) (AKK FEM PLUR) (NOM MAS PLUR) (AKK MAS PLUR)))
EIN (MAKE-PARSTYP :CGN '((NOM MAS SING))); AUCH MOM NEU SING
EINE (MAKE-PARSTYP :CGN '((NOM FEM SING) (AKK FEM SING)))
EINEN (MAKE-PARSTYP :CGN '((AKK MAS SING)))
;----------------------------------------------------------------------------------------------------------------
INFORMATIK  (MAKE-PARSTYP :CGN '((NOM FEM SING) (AKK FEM SING)))
STUDENT     (MAKE-PARSTYP :CGN '((NOM MAS SING)))
STUDENTEN   (MAKE-PARSTYP :CGN '((AKK MAS SING) (NOM MAS PLUR) (AKK MAS PLUR)))
HASE        (MAKE-PARSTYP :CGN '((NOM MAS SING)))
HASEN       (MAKE-PARSTYP :CGN '((AKK MAS SING) (NOM MAS PLUR) (AKK MAS PLUR)))
MOHRRUEBE   (MAKE-PARSTYP :CGN '((NOM FEM SING) (AKK FEM SING)))
MOHRRUEBEN  (MAKE-PARSTYP :CGN '((NOM FEM PLUR) (AKK FEM PLUR)))
;----------------------------------------------------------------------------------------------------------------
STUDIERT    (MAKE-PARSTYP :CGN '((AKK BEL SING))); BEL STEHT FUER BELIEBIG
STUDIEREN   (MAKE-PARSTYP :CGN '((AKK BEL PLUR)))
SIEHT       (MAKE-PARSTYP :CGN '((AKK BEL SING)))
SEHEN       (MAKE-PARSTYP :CGN '((AKK BEL PLUR)))
MAG         (MAKE-PARSTYP :CGN '((AKK BEL SING)))
MOEGEN      (MAKE-PARSTYP :CGN '((AKK BEL PLUR)))
ISST        (MAKE-PARSTYP :CGN '((AKK BEL SING)))
ESSEN	    (MAKE-PARSTYP :CGN '((AKK BEL PLUR)))
SCHLAEFT    (MAKE-PARSTYP :CGN '((BEL BEL SING)))
SCHLAFEN    (MAKE-PARSTYP :CGN '((BEL BEL PLUR))) 
) 

;Funktion vergleicht Einzelwerte der CNG-Komponente
(DEFUN EINZEL-VERGL (SOLL IST)
(COND ((EQL SOLL 'BEL) IST)
      ((EQL IST 'BEL) SOLL)
      ((EQL SOLL IST) SOLL)
      (T NIL)))
;(EINZEL-VERGL 'BEL 'NOM);-> NOM
;(EINZEL-VERGL 'NOM 'NOM);-> NOM
;(EINZEL-VERGL 'AKK 'NOM);-> NIL
;(EINZEL-VERGL 'AKK 'BEL);-> AKK
;(EINZEL-VERGL 'BEL 'AKK);-> AKK
;(EINZEL-VERGL 'BEL 'BEL);-> BEL


; Funktion vergleicht 2 Listen mit allen CNG-Komponenten
(DEFUN CGN-SET-VERGL (SOLL-CGN IST-CGN-SET)
(COND ((NULL IST-CGN-SET) NIL)
      ((MEMBER 'NIL (APPEND (MAPCAR 'EINZEL-VERGL SOLL-CGN (CAR IST-CGN-SET)))) (CGN-SET-VERGL SOLL-CGN (CDR IST-CGN-SET)))
      (T (APPEND (MAPCAR 'EINZEL-VERGL SOLL-CGN (CAR IST-CGN-SET))))))

;(CGN-SET-VERGL '(NOM MAS SING) '((NOM MAS SING)));-> (NOM MAS SING)
;(CGN-SET-VERGL '(NOM MAS SING) '((NOM MAS SING) (AKK MAS SING)));-> (NOM MAS SING)
;(CGN-SET-VERGL '(AKK MAS SING) '((NOM MAS SING) (AKK MAS SING)));-> (AKK MAS SING)
;(CGN-SET-VERGL '(AKK MAS SING) '((NOM MAS SING) (AKK BEL SING)));-> (AKK MAS SING)
;(CGN-SET-VERGL '(AKK MAS SING) '((NOM FEM SING) (AKK FEM SING) (NOM FEM PLUR) (AKK FEM PLUR) (NOM MAS PLUR) (AKK MAS PLUR)));-> NIL
;(CGN-SET-VERGL '(AKK MAS PLUR) '((NOM FEM SING) (AKK FEM SING) (NOM FEM PLUR) (AKK FEM PLUR) (NOM MAS PLUR) (AKK MAS PLUR)));-> (AKK MAS PLUR)
;(CGN-SET-VERGL '(AKK MAS PLUR) '((BEL BEL SING)));->NIL
;(CGN-SET-VERGL '(AKK MAS SING) '((BEL BEL SING)));->(AKK MAS SING)
;(CGN-SET-VERGL '(AKK BEL SING) '((BEL BEL SING)));->(AKK BEL SING)
;(CGN-SET-VERGL '(BEL BEL SING) '((AKK BEL SING)));->(AKK BEL SING)


; FUNKTION FILTERT BEIM UEBERGANG NP -> VP CASUS UND GENUS HERAUS
(DEFUN CAS-GEN-FILTER (PARS-STRUCT)
(SETF (PARSTYP-CGN PARS-STRUCT) (LIST 'BEL 'BEL (CADDR (PARSTYP-CGN PARS-STRUCT)))) PARS-STRUCT)

;(CAS-GEN-FILTER (MAKE-PARSTYP :PHRASE '(SIEHT DEN HASEN) :CGN '(NOM MAS SING)));-> 
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (BEL BEL SING) :ERROR NIL)


; FUNKTION FILTERT BEIM UEBERGANG VERB -> NP den NUMERUS HERAUS
(DEFUN NUM-FILTER (PARS-STRUCT) 
(SETF (PARSTYP-CGN PARS-STRUCT) (LIST (CAR (PARSTYP-CGN PARS-STRUCT)) (CADR (PARSTYP-CGN PARS-STRUCT)) 'BEL)) PARS-STRUCT)

(NUM-FILTER (MAKE-PARSTYP :PHRASE '(DEN HASEN) :CGN '(AKK BEL SING)));->  
;#S(PARSTYP :PHRASE (DEN HASEN) :CGN (AKK BEL BEL) :ERROR NIL)



; PARSER
(DEFUN PARSER2 (WORT-L)
(LET ((FEHLER (PARSTYP-ERROR (SATZ2 (MAKE-PARSTYP :PHRASE WORT-L :CGN '(NOM BEL BEL))))))
;(IFN FEHLER "ACCEPT" FEHLER)))
(IF FEHLER FEHLER "ACCEPT")))


; SATZ
(DEFUN SATZ2 (PARS-STRUCT)
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT) 
      ((NULL (PARSTYP-PHRASE PARS-STRUCT)) 
       (SETF (PARSTYP-ERROR PARS-STRUCT) "Satz fehlt")
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) (APPEND LEX-ARTIKEL LEX-nomen LEX-EIGENNAME)) (VERBALPHRASE2 (CAS-GEN-FILTER (NOMINALPHRASE2 PARS-STRUCT))))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string "SATZ beginnt nicht mit einer NOMINALPHRASE " (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT)))))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))

; NOMINALPHRASE
(DEFUN NOMINALPHRASE2 (PARS-STRUCT) 
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT) 
      ;((NULL (PARSTYP-PHRASE PARS-STRUCT)) (SETF (PARSTYP-ERROR PARS-STRUCT) "NOMINALPHRASE fehlt") PARS-STRUCT)
      ((NULL (PARSTYP-PHRASE PARS-STRUCT)) PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-ARTIKEL) (NOMEN2 (ARTIKEL2 PARS-STRUCT)))
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-NOMEN) (NOMEN2 PARS-STRUCT))
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-EIGENNAME) (EIGENNAME2 PARS-STRUCT))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string "NOMINALPHRASE beginnt nicht mit ARTIKEL, nomen oder EIGENNAME: " (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT)))))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))

;(NOMINALPHRASE2 (MAKE-PARSTYP :PHRASE '(MAX SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)
;(NOMINALPHRASE2 (MAKE-PARSTYP :PHRASE '(DER STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)
;(NOMINALPHRASE2 (MAKE-PARSTYP :PHRASE '(STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)


; VERBALPHRASE
(DEFUN VERBALPHRASE2 (PARS-STRUCT)
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT) 
      ((NULL (PARSTYP-PHRASE PARS-STRUCT)) (SETF (PARSTYP-ERROR PARS-STRUCT) "Verbalphrase fehlt") PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-VERB) (RESTPHRASE2 (NUM-FILTER (VERB2 PARS-STRUCT))))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string "Verbalphrase beginnt nicht mit einem VERB: " (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT)))))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))


;(VERBALPHRASE2 (MAKE-PARSTYP :PHRASE '(STUDIEREN INFORMATIK) :CGN '(BEL BEL PLUR) :ERROR NIL));->
;#S(PARSTYP :PHRASE NIL :CGN (AKK FEM SING) :ERROR NIL)


; RESTPHRASE
(DEFUN RESTPHRASE2 (PARS-STRUCT) 
(COND ((NULL (PARSTYP-PHRASE PARS-STRUCT)) PARS-STRUCT)
      ((NOT (NULL (PARSTYP-PHRASE (NOMINALPHRASE2 PARS-STRUCT))))
       (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (LIST-TO-STRING (PARSTYP-PHRASE PARS-STRUCT)) " ist ueberfluessig"))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)
      (T (NOMINALPHRASE2 PARS-STRUCT))))


; ARTIKEL
(DEFUN ARTIKEL2 (PARS-STRUCT)
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-ARTIKEL) 
       (COND ((NOT (NULL (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT)))))))
              (SETF (PARSTYP-CGN PARS-STRUCT) (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT))))))
              (SETF (PARSTYP-PHRASE PARS-STRUCT) (CDR (PARSTYP-PHRASE PARS-STRUCT))) 
              PARS-STRUCT)
             (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " steht im falschen Fall"))
                (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
                (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
                PARS-STRUCT)))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist kein Artikel oder ist unbekannt"))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))


;(ARTIKEL2 (MAKE-PARSTYP :PHRASE '(DER STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (STUDENT SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)
;(ARTIKEL2 (MAKE-PARSTYP :PHRASE '(DER STUDENT SIEHT DEN HASEN) :CGN '(AKK MAS SING)));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "DER steht im falschen Fall")
;(ARTIKEL2 (MAKE-PARSTYP :PHRASE '(DAS HAUS STEHT IM GARTEN) :CGN '(AKK MAS SING)));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "DAS ist kein Artikel oder ist unbekannt")


; NOMEN
(DEFUN NOMEN2 (PARS-STRUCT) 
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT)
      ((NULL (PARSTYP-PHRASE PARS-STRUCT)) (SETF (PARSTYP-ERROR PARS-STRUCT) "nomen fehlt") PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-NOMEN) 
       (COND ((NOT (NULL (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT)))))))
              (SETF (PARSTYP-CGN PARS-STRUCT) (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT))))))
              (SETF (PARSTYP-PHRASE PARS-STRUCT) (CDR (PARSTYP-PHRASE PARS-STRUCT))) 
              PARS-STRUCT)
             (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist nicht kongruent zu Artikel oder den Vorgaben"))
                (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
                (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
                PARS-STRUCT)))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist kein NOMEN oder ist unbekannt"))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))


;(NOMEN2 (MAKE-PARSTYP :PHRASE '(DER STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));-> 
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "DER ist kein Nomen oder ist unbekannt")
;(NOMEN2 (MAKE-PARSTYP :PHRASE '(STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)
;(NOMEN2 (MAKE-PARSTYP :PHRASE '(STUDENTEN SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS PLUR) :ERROR NIL)
;(NOMEN2 (MAKE-PARSTYP :PHRASE '(STUDENTEN SIEHT DEN HASEN) :CGN '(NOM BEL SING)));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "STUDENTEN ist nicht kongruent zu Artikel oder den Vorgaben")

; EIGENNAME
(DEFUN EIGENNAME2 (PARS-STRUCT)
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-EIGENNAME) 
       (COND ((NOT (NULL (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT)))))))
              (SETF (PARSTYP-CGN PARS-STRUCT) (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT))))))
              (SETF (PARSTYP-PHRASE PARS-STRUCT) (CDR (PARSTYP-PHRASE PARS-STRUCT))) 
              PARS-STRUCT)
             (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist nicht kongruent zu den Vorgaben"))
                (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
                (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
                PARS-STRUCT)))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist kein EIGENNAME oder ist unbekannt"))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))


;(EIGENNAME2 (MAKE-PARSTYP :PHRASE '(STUDENT SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));-> 
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "student ist kein EIGENNAME oder ist unbekannt")
;(EIGENNAME2 (MAKE-PARSTYP :PHRASE '(MAX SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)
;(EIGENNAME2 (MAKE-PARSTYP :PHRASE '(MORITZ SIEHT DEN HASEN) :CGN '(NOM BEL BEL)));->
;#S(PARSTYP :PHRASE (SIEHT DEN HASEN) :CGN (NOM MAS SING) :ERROR NIL)


; VERB
(DEFUN VERB2 (PARS-STRUCT)
(COND ((NOT (NULL (PARSTYP-ERROR PARS-STRUCT))) PARS-STRUCT)
      ((MEMBER (CAR (PARSTYP-PHRASE PARS-STRUCT)) LEX-VERB) 
       (COND ((NOT (NULL (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT)))))))
              (SETF (PARSTYP-CGN PARS-STRUCT) (CGN-SET-VERGL (PARSTYP-CGN PARS-STRUCT) (PARSTYP-CGN (EVAL (CAR (PARSTYP-PHRASE PARS-STRUCT))))))
              (SETF (PARSTYP-PHRASE PARS-STRUCT) (CDR (PARSTYP-PHRASE PARS-STRUCT))) 
              PARS-STRUCT)
             (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist nicht kongruent zu den Vorgaben"))
                (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
                (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
                PARS-STRUCT)))
      (T (SETF (PARSTYP-ERROR PARS-STRUCT) (concatenate 'string (SYMBOL-NAME (CAR (PARSTYP-PHRASE PARS-STRUCT))) " ist kein Verb oder ist unbekannt"))
         (SETF (PARSTYP-CGN PARS-STRUCT) NIL)
         (SETF (PARSTYP-PHRASE PARS-STRUCT) NIL)
         PARS-STRUCT)))

;(VERB2 (MAKE-PARSTYP :PHRASE '(SIEHT DEN HASEN) :CGN '(BEL BEL SING)));->
;#S(PARSTYP :PHRASE (DEN HASEN) :CGN (AKK BEL SING) :ERROR NIL)
;(VERB2 (MAKE-PARSTYP :PHRASE '(SIEHT DEN HASEN) :CGN '(AKK MAS SING)));->
;#S(PARSTYP :PHRASE (DEN HASEN) :CGN (AKK MAS SING) :ERROR NIL)
;(VERB2 (MAKE-PARSTYP :PHRASE '(SIEHT DEN HASEN) :CGN '(BEL BEL PLUR)));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "SIEHT ist nicht kongruent zu den Vorgaben")
;(VERB2 (MAKE-PARSTYP :PHRASE '(HOERT DEN HASEN) :CGN '(BEL BEL SING)));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "HOERT ist kein Verb oder ist unbekannt")
;(VERB2 (MAKE-PARSTYP :PHRASE '(ISST DEN HASEN) :CGN '(NOM MAS SING) :ERROR NIL));->
;#S(PARSTYP :PHRASE NIL :CGN NIL :ERROR "ISST ist nicht kongruent zu den Vorgaben")


;(TRACE PARSER2 SATZ2 NOMINALPHRASE2 VERBALPHRASE2 RESTPHRASE2 ARTIKEL2 nomen2 EIGENNAME2 VERB2 NUM-FILTER)
;(UNTRACE PARSER2 SATZ2 NOMINALPHRASE2 VERBALPHRASE2 RESTPHRASE2 ARTIKEL2 nomen2 EIGENNAME2 VERB2 NUM-FILTER)

;----------------------------------------------------------------------------------------------------------------
(PRINT '---------------------------------------------KORREKT-----------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER2 '(DER STUDENT ISST DEN HASEN))         ;-> "ACCEPT"
(PARSER2 '(DIE MOHRRUEBE SIEHT DEN HASEN))      ;-> "ACCEPT"
(PARSER2 '(STUDENT STUDIERT INFORMATIK))        ;-> "ACCEPT"
(PARSER2 '(STUDENTEN STUDIEREN INFORMATIK))     ;-> "ACCEPT" 
(PARSER2 '(EIN STUDENT STUDIERT INFORMATIK))	;-> "ACCEPT"
(PARSER2 '(DER STUDENT STUDIERT INFORMATIK))	;-> "ACCEPT"
(PARSER2 '(MAX STUDIERT INFORMATIK))		;-> "ACCEPT"
(PARSER2 '(EIN STUDENT STUDIERT DIE INFORMATIK));-> "ACCEPT"
(PARSER2 '(DER STUDENT STUDIERT DIE INFORMATIK));-> "ACCEPT"
(PARSER2 '(MAX STUDIERT DIE INFORMATIK))	;-> "ACCEPT"
(PARSER2 '(MORITZ MAG INFORMATIK))		;-> "ACCEPT"
(PARSER2 '(MAX MAG MORITZ))			;-> "ACCEPT"
(PARSER2 '(DER HASE STUDIERT DIE MOHRRUEBE))	;-> "ACCEPT"
(PARSER2 '(MAX STUDIERT DEN HASEN))		;-> "ACCEPT"
(PARSER2 '(MORITZ SCHLAEFT))                    ;-> "ACCEPT"
;----------------------------------------------------------------------------------------------------------------
(PRINT '-----------------------------------------KONGRUENZFEHLER------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER2 '(DIE MOHRRUEBE SIEHT DER HASEN))      ;-> "DER steht im falschen Fall"
(PARSER2 '(DIE HASE STUDIERT DIE STUDENT))	;-> "HASE ist nicht kongruent zu Artikel oder den Vorgaben"
(PARSER2 '(DIE HASE SCHLAEFT DIE STUDENT))	;-> "HASE ist nicht kongruent zu Artikel oder den Vorgaben"
(PARSER2 '(STUDENT STUDIERT DEN MOHRRUEBE))     ;-> "MOHRRUEBE ist nicht kongruent zu Artikel oder den Vorgaben"
(PARSER2 '(DEN STUDENT STUDIERT DEN MOHRRUEBE));-> "DEN steht im falschen Fall"
(PARSER2 '(DER MOHRRUEBE SIEHT DEN STUDENT));-> "MOHRRUEBE ist nicht kongruent zu Artikel oder den Vorgaben"
(PARSER2 '(DIE MOHRRUEBE SIEHT DER STUDENT));-> "DER steht im falschen Fall"
(PARSER2 '(DEN MOHRRUEBE SIEHT DIE STUDENT));-> "DEN steht im falschen Fall"
;----------------------------------------------------------------------------------------------------------------
(PRINT '------------------------------------------SYNTAXFEHLER--------------------------------------------------)
;----------------------------------------------------------------------------------------------------------------
(PARSER2 '())				;-> "SATZ-FEHLT"
(PARSER2 '(EIN))			;-> "nomen-FEHLT"
(PARSER2 '(STUDENT))			;-> "VERBALPHRASE-FEHLT"
(PARSER2 '(STUDENT HASE))		;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: HASE" 
(PARSER2 '(EIN STUDENT STUDIERT DER))	;-> "DER steht im falschen Fall"
(PARSER2 '(DER STUDENT MAG STUDIERT))	;-> "RESTPHRASE BEGINNT NICHT MIT ARTIKEL nomen ODER EIGENNAME: STUDIERT"
(PARSER2 '(STUDIERT MAX INFORMATIK))	;-> "SATZ BEGINNT NICHT MIT EINER NOMINALPHRASE: STUDIERT"
(PARSER2 '(MORITZ INFORMATIK MAG))	;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: INFORMATIK"
(PARSER2 '(MAX STUDIERT DIE ASTRONOMIE));-> "ASTRONOMIE IST KEIN nomen oder ist unbekannt"
(PARSER2 '(MAX INFORMATIK SCHLAEFT))    ;-> "VERBALPHRASE BEGINNT NICHT MIT EINEM VERB: INFORMATIK" 
(PARSER2 '(MAX MAG MORITZ STUDIERT))	;-> "STUDIERT ist ueberfluessig"
(PARSER2 '(MAX MAG MORITZ STUDIERT X))	;-> "STUDIERT X ist ueberfluessig"
;****************************************************************************************************************

