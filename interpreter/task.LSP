;********************************************************************************************************
;********************************************************************************************************
;*******                           Übung 3: Interpretation logischer Ausdrücke		           ******
;********************************************************************************************************
;********************************************************************************************************
(SETQ *PRINT-LENGTH*)
;********************************************************************************************************
; Gegeben sind logische Ausdrücke in Präfixnotation, die beliebig verschachtelt sein können und die die 
; Grundfunktionen Konjunktion, Disjunktion, Negation, Implikation, NAND, NOR benutzen.
; Die Grundfunktionen Konjunktion, Disjunktion, NAND, NOR sind n-stellig;  Negation ist einstellig und
; Implikation zweistellig. Als logische Konstanten werden die Werte 0 und 1 benutzt.
; In den Ausdrücken werden folgende Operationssymbole für die Funktionen benutzt:
;
; Funktion   | Symbol
;------------+--------
; Konjunktion|  &
; Disjunktion|  v
; Antivalenz |  #  Bei Benutzung im Programm Backslash voransetzen \# wegen Metabedeutung von #
;    NAND    |  ^
;    NOR     |  |  Bei Benutzung im Programm Backslash voransetzen \| wegen Metabedeutung von |
; Implikation| ->
;   Negation |  !
;********************************************************************************************************
; Aufgabe 1: Definieren und testen Sie die Grundfunktionen.
;********************************************************************************************************
(DEFUN KONJUNKTION (&REST LWL)
(COND ((NULL LWL) 1); NEUTRALER WERT DER KONJUNKTION
;....................................................
))
;-------------------------------------------------------------------------------------------------------
(KONJUNKTION);->1
(KONJUNKTION 1);->1
(KONJUNKTION 1 0);->0
(KONJUNKTION 1 1 0 1);->0
(KONJUNKTION 1 1 1 1 1);->1
;********************************************************************************************************
(DEFUN DISJUNKTION (&REST LWL)
(COND ((NULL LWL) 0); NEUTRALER WERT DER DISJUNKTION
;.....................................................
))
;-------------------------------------------------------------------------------------------------------
(DISJUNKTION);->0
(DISJUNKTION 1);->1
(DISJUNKTION 1 0);->1
(DISJUNKTION 1 1 1);->1
(DISJUNKTION 0 0 0);->0
;********************************************************************************************************
;           N-äre ANTIVALENZ
;--------------------------------------------------------------------------------------------------------
(DEFUN ANTIVALENZ (&REST LWL) 
(COND ((NULL LWL) 0); NEUTRALER WERT DER ANTIVALENZ  
;.......................................................
))
;-------------------------------------------------------------------------------------------------------
(ANTIVALENZ);->0
(ANTIVALENZ 1);->1
(ANTIVALENZ 1 1);->0
(ANTIVALENZ 1 1 1);->1
(ANTIVALENZ 1 1 1 1);->0
(ANTIVALENZ 0 0 0 0);->0
;********************************************************************************************************
;           unäre NEGATION 
;--------------------------------------------------------------------------------------------------------
(DEFUN NEGATION (EXPR) 
(COND ((ATOM EXPR) (- 1 EXPR))
;.....................................
))
;--------------------------------------------------------------------------------------------------------
(NEGATION 1);->0
(NEGATION 0);->1
(NEGATION '(v (& 1 0) (& 1 1)));->0
;********************************************************************************************************
;           Binäre IMPLIKATION 
;--------------------------------------------------------------------------------------------------------
(DEFUN IMPLIKATION (X Y)
;........................
)
;--------------------------------------------------------------------------------------------------------
(IMPLIKATION 0 0);->1
(IMPLIKATION 0 1);->1
(IMPLIKATION 1 0);->0
(IMPLIKATION 1 1);->1
;********************************************************************************************************
;           N-äres NAND
;--------------------------------------------------------------------------------------------------------
(DEFUN NAND (&REST LWL) 
;........................
)
;--------------------------------------------------------------------------------------------------------
(NAND 0 0);->1
(NAND 0 1);->1
(NAND 1 0);->1
(NAND 1 1);->0
;********************************************************************************************************
;           N-äres NOR
;--------------------------------------------------------------------------------------------------------
(DEFUN NOR (&REST LWL) 
;........................
)
;--------------------------------------------------------------------------------------------------------
(NOR 0 0);->1
(NOR 0 1);->0
(NOR 1 0);->0
(NOR 1 1);->0
;********************************************************************************************************
;  Aufgabe 2: Definieren und testen Sie die Interpreterfunktion.
;********************************************************************************************************
(DEFUN LOG-INT (L-EXPR)
;........................
)
;--------------------------------------------------------------------------------------------------------
(LOG-INT '(v (& 1 0) (& 1 1)));-> 1
(LOG-INT '(\# (& 1 0) (& 1 1)));-> 1
(LOG-INT '(\# (& 1 1) (& 1 1)));-> 0
(LOG-INT '(-> (& 1 0) (& 1 1)));-> 1
(LOG-INT '(! (v (& 1 0) (& 1 1))));->0
(LOG-INT '(^ (^ 0 0) (^ 0 0)));->0
(LOG-INT '(! 0));->1
;********************************************************************************************************
;  Aufgabe 3: Definieren und testen Sie als letztes eine Funktionen, die für einen gegebenen symbolischen
; aussagenlogischen Ausdruck festellt:
; 1. Ist der Ausdruck eine Tautologie, d.h. ist sein Wert gleich 1
; 2. Ist der Ausdruck eine Widerspruch, d.h. ist sein Wert gleich 0
; 3. Ist der Ausdruck lösbar, d.h. es gibt solche Belegungen seiner Variablen, für die sein Wert gleich 1
;    ist. Für diesen Fall werden diese Belegungen (Wurzeln) zurückgegeben
;--------------------------------------------------------------------------------------------------------
; Benötigte Teilfunktionen:
; 1. EXTRAKT-VAR: Funktion, die aus dem gegebenen Ausdruck die Variablen herausnimmt
; 2. BINDUNG: Funktion, die die jeweiligen Werte an die Variablen bindet. Beispiel für algebraische
;             Ausdrücke: An die Variablen X Y Z des Ausdrucks (+ X (* Y Z))) werden die Werte 1 2 3 
;             gebunden, danach kann der Ausdruck ausgewertet werden.
;--------------------------------------------------------------------------------------------------------
; Lösung: Die Variablen werden vor der Auswertung des Ausdrucks mittels einer zu definierenden Funktion
;         BAUM-SUBSTITUTION durch die entsprechenden Konstanten ersetzt werden.
;--------------------------------------------------------------------------------------------------------
;(BAUM-SUBSTITUTION '(+ X (* Y Z)) '((X . 1) (Y . 2) (Z . 3)));-> (+ 1 (* 2 3))  
;(EVAL (BAUM-SUBSTITUTION '(+ X (* Y Z)) '((X . 1) (Y . 2) (Z . 3))));-> 7
;********************************************************************************************************
; EXTRAKTION DER VARIABLEN: ALLE CDRs DER AUSDRÜCKE
;--------------------------------------------------------------------------------------------------------
(DEFUN EXTRAKT-VAR (EXPR OPZ-L &OPTIONAL (EXPR-AKKU NIL) (ERG-AKKU NIL))
;........................
)
;--------------------------------------------------------------------------------------------------------
(EXTRAKT-VAR '(v (& X Y) (& X Z)) '(v & \# ^ $ -> !));-> (X Z Y)
(EXTRAKT-VAR '(\# (& X Y) (& Z A)) '(v & \# ^ $ -> !));-> (X Z A Y)
(EXTRAKT-VAR '(\# (& X X) (& X X)) '(v & \# ^ $ -> !));-> (X)
(EXTRAKT-VAR '(-> (& X Y) (& Z A)) '(v & \# ^ $ -> !));-> (X Z A Y)
(EXTRAKT-VAR '(! (v (& X Y) (& A B))) '(v & \# ^ $ -> !));->(X A B Y)
(EXTRAKT-VAR '(^ (^ Y Y) (^ Y Y)) '(v & \# ^ $ -> !));->(Y)
(EXTRAKT-VAR '($ Y Y) '(v & \# ^ $ -> !));->(Y)
(EXTRAKT-VAR '($ ($ Y Y) ($ Y Y)) '(v & \# ^ $ -> !));->(Y)
;********************************************************************************************************
; Substituierung der Variablen durch Konstanten
;--------------------------------------------------------------------------------------------------------
(DEFUN BAUM-SUBSTITUTION (BAUM SUBLI)
;........................................................
)
;--------------------------------------------------------------------------------------------------------
(BAUM-SUBSTITUTION '(+ X (* Y Z)) '((X . 1) (Y . 2) (Z . 3)));-> (+ 1 (* 2 3))  
(EVAL (BAUM-SUBSTITUTION '(+ X (* Y Z)) '((X . 1) (Y . 2) (Z . 3))));-> 7
;********************************************************************************************************
; Inkrementieren eines Binärvektors mit Hinzufügen einer n+1-ten Stelle BEI (1 1 ... 1 1)
;--------------------------------------------------------------------------------------------------------
(DEFUN B-INCR (B-VECTOR) (REVERSE (B-INCR-H (REVERSE B-VECTOR))))
;--------------------------------------------------------------------------------------------------------
(DEFUN B-INCR-H (REV-VEC)
(COND ((NULL REV-VEC) (LIST 1)); EXIT
      ((= 0 (CAR REV-VEC)) (CONS 1 (CDR REV-VEC)))
      (T (CONS 0 (B-INCR-H (CDR REV-VEC))))));
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(B-INCR '(0 0 0)); -> (0 0 1) 
(B-INCR '(1 1 1)); -> (1 0 0 0) 
;********************************************************************************************************
; BESTIMMUNG DER WERTE DES LOGISCHEN AUSDRUCKS FÜR ALLE WERTEKOMBINATIONEN
;--------------------------------------------------------------------------------------------------------
(DEFUN LOG-ANALYSE (L-EXPR OPZ-L)
;.................................................................................
)   
;--------------------------------------------------------------------------------------------------------
(LOG-ANALYSE '(v (& X Y) (& X Z)) '(v & \# ^ $ -> !));->
; (X Z Y) | F(X Z Y)
; --------+---
; (0 0 0) | 0
; (0 0 1) | 0
; (0 1 0) | 0
; (0 1 1) | 0
; (1 0 0) | 0
; (1 0 1) | 1
; (1 1 0) | 1
; (1 1 1) | 1
;(((1 0 1) . 1) ((1 1 0) . 1) ((1 1 1) . 1))

(LOG-ANALYSE '(& X (! X) Y Z) '(v & \# ^ $ -> !));->
; (Z Y X) | F(Z Y X)
; --------+---
; (0 0 0) | 0
; (0 0 1) | 0
; (0 1 0) | 0
; (0 1 1) | 0
; (1 0 0) | 0
; (1 0 1) | 0
; (1 1 0) | 0
; (1 1 1) | 0
;WIDERSPRUCH 

(LOG-ANALYSE '(v (& X Y) (& (! X) Y)  (& X (! Y)) (& (! X) (! Y))) '(v & \# ^ $ -> !));->
; (Y X) | F(Y X)
; --------+---
; (0 0) | 1
; (0 1) | 1
; (1 0) | 1
; (1 1) | 1
;TAUTOLOGIE 

(LOG-ANALYSE '(-> X X)  '(v & \# ^ $ -> !));->
; (X) | F(X)
; --------+---
; (0) | 1
; (1) | 1
;TAUTOLOGIE

(LOG-ANALYSE '( -> (-> X Y) Z)  '(v & \# ^ $ -> !));->
; (X Z Y) | F(X Z Y)
; --------+---
; (0 0 0) | 0
; (0 0 1) | 0
; (0 1 0) | 1
; (0 1 1) | 1
; (1 0 0) | 1
; (1 0 1) | 0
; (1 1 0) | 1
; (1 1 1) | 1
;(((0 1 0) . 1) ((0 1 1) . 1) ((1 0 0) . 1) ((1 1 0) . 1) ((1 1 1) . 1))
